
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import os
import sys
import time

import sigma.exact as exact

from sigma.simulation import run_simulations
from sigma.utils import *

def produce_panel_for_figure_2(structure, b, c, mutation_rates_exact, 
	mutation_rates_simulation, selection_intensities, number_of_updates, directory):
	'''
	Generates data and plots panels for figure 2

	Parameters
	----------
	structure: networkx.classes.graph.Graph
		The spatial structure of the population
	b: float
		The benefit generated by producers 
	c: float
		The cost incurred by producers
	mutation_rates_exact: numpy.ndarray
		The per-capita mutation probabilities for exact calculations
	mutation_rates_simulation: numpy.ndarray
		The per-capita mutation probabilities for simulations
	selection_intensities: list
		The list of selection intensities to run
	number_of_updates: int
		The number of times to update the population
	directory: str
		The path of the output directory
	'''
	
	print('Running exact calculations.')
	start_time = time.time()
	# run exact calculations (write 'lsqr' in place of 'spsolve' to use a least-squares solver)
	ff_exact, pp_exact = exact.run_calculations(structure, b, c, mutation_rates_exact, solver='spsolve')
	print('Total time taken: %s seconds.' % (np.round(time.time() - start_time, 3)))

	for selection_intensity in selection_intensities:
		print('Running simulations for selection intensity %s.' % selection_intensity)
		ff_simulation = run_simulations(structure, 'ff', b, c, 
			mutation_rates_simulation, selection_intensity, number_of_updates)
		pp_simulation = run_simulations(structure, 'pp', b, c, 
			mutation_rates_simulation, selection_intensity, number_of_updates)
		print('Total time taken: %s seconds.' % (np.round(time.time() - start_time, 3)))
		for data_type in ['exact', 'simulation']:
			for good_type in ['ff', 'pp']:
				if data_type=='exact':
					frequencies = 0.5+selection_intensity*locals()[good_type+'_'+data_type]
				else:
					frequencies = locals()[good_type+'_'+data_type]
				save_data(frequencies, os.path.join(directory, good_type+'-goods/'+data_type+'.pickle'))

		save_data(0.5+selection_intensity*ff_exact, os.path.join(directory, 
			'{:e}'.format(selection_intensity)+'/ff-goods/exact.pickle'))
		save_data(0.5+selection_intensity*pp_exact, os.path.join(directory, 
			'{:e}'.format(selection_intensity)+'/pp-goods/exact.pickle'))
		save_data(ff_simulation, os.path.join(directory, 
			'{:e}'.format(selection_intensity)+'/ff-goods/simulation.pickle'))
		save_data(pp_simulation, os.path.join(directory, 
			'{:e}'.format(selection_intensity)+'/pp-goods/simulation.pickle'))

		# plot exact and simulation results together
		f = plt.figure(figsize=(10, 10))
		plt.axhline(y=0.5, xmin=0, xmax=1, color=(0, 0, 0), linestyle='--')
		plt.plot(mutation_rates_exact, 0.5+selection_intensity*ff_exact, color=(0, 0.6, 0.6), linewidth=3)
		plt.plot(mutation_rates_exact, 0.5+selection_intensity*pp_exact, color=(0.6, 0, 0.6), linewidth=3)
		plt.scatter(mutation_rates_simulation, ff_simulation, color=(0, 0.6, 0.6))
		plt.scatter(mutation_rates_simulation, pp_simulation, color=(0.6, 0, 0.6))
		plt.xticks(fontsize=20)
		plt.yticks([0, 0.25, 0.5, 0.75, 1], fontsize=20)
		plt.xlim([0, 1])
		plt.ylim([0, 1])
		plt.grid()
		f.savefig(os.path.join(directory, '{:e}'.format(selection_intensity)+'/dataplot.pdf'), bbox_inches='tight')

if __name__=='__main__':
	# output directories
	ba_directory = 'results/figure_2/barabasi-albert/'
	er_directory = 'results/figure_2/erdos-renyi/'
	if len(sys.argv)>1 and sys.argv[1]=='True':
		# load structures used to produce figure 1 in the text
		structure_ba = open_data('data/figure_1/barabasi-albert/structure.pickle') # barabasi-albert graph
		structure_er = open_data('data/figure_1/erdos-renyi/structure.pickle') # erdos-renyi graph
	else:
		# generate new structures
		N, m, p = 50, 1, 0.05

		structure_ba = nx.generators.random_graphs.barabasi_albert_graph(N, m) # barabasi-albert graph
		save_data(structure_ba, ba_directory+'structure.pickle')
		
		structure_er = nx.generators.random_graphs.erdos_renyi_graph(N, p) # erdos-renyi graph
		while not nx.is_connected(structure_er):
			structure_er = nx.generators.random_graphs.erdos_renyi_graph(N, p)
		save_data(structure_er, er_directory+'structure.pickle')

	print_graph(structure_ba, ba_directory+'structure.pdf')
	print_graph(structure_er, er_directory+'structure.pdf')

	number_of_points_exact = 1000 # number of mutation rates used for exact calculations
	number_of_points_simulation = 39 # number of mutation rates used for exact calculations
	number_of_updates = int(1e8) # number of updates used to take mean frequencies
	selection_intensities = [0.05, 0.20, 0.50] # selection intensities
	
	b_ba, b_er = 0.9, 5 # benefits generated by producers (for BA and ER graphs, respectively)
	c = 1 # cost incurred by producers

	mutation_rates_exact = np.linspace(1/number_of_points_exact, 1, number_of_points_exact)
	mutation_rates_simulation = np.linspace(1/(number_of_points_simulation+1), 
		1-1/(number_of_points_simulation+1), number_of_points_simulation)

	print('Producing panel(s) for BA graph.')
	produce_panel_for_figure_2(structure_ba, b_ba, c, mutation_rates_exact, 
		mutation_rates_simulation, selection_intensities, number_of_updates, ba_directory)

	print('Producing panel(s) for ER graph.')
	produce_panel_for_figure_2(structure_er, b_er, c, mutation_rates_exact, 
		mutation_rates_simulation, selection_intensities, number_of_updates, er_directory)
